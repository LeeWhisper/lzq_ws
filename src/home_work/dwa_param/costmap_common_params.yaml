# robot_radius: 0.10  
footprint: [[0.22, 0.22], [-0.22, 0.22], [-0.22, -0.22], [0.22, -0.22]] # Real is 0.2
 
# map_type: voxel # From turtlebot2, 3D map
map_type: costmap # From turtlebot3, 2D map
 
obstacle_layer:
  enabled: True              # 使能障碍物层
  obstacle_range: 3.0 # 规划考虑几米内障碍物
  raytrace_range: 3.5 # 实时清除几米内障碍物
  max_obstacle_height:  1.0
  min_obstacle_height:  0.0
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true    #true 禁止全局路径规划穿越未知区域
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  publish_voxel_map: false
#导航包所需要的传感器
observation_sources:  scan
#对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
scan: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}


  
 
# 全局膨胀层参数配置
global_inflation_layer:
  enabled: true # 是否使能全局膨胀层
  cost_scaling_factor: 10.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)
  inflation_radius: 0.35 # 全局最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。

  
# 局部膨胀层参数配置
local_inflation_layer:
  enabled: true # 是否使能局部膨胀层
  cost_scaling_factor: 10.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)
  inflation_radius: 0.1 # 局部最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。


# 静态层参数配置

static_layer:
  map_topic: "/map" # 静态地图话题
  enabled: true # 是否使用静态层