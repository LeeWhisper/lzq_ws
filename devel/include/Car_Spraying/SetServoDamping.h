// Generated by gencpp from file Car_Spraying/SetServoDamping.msg
// DO NOT EDIT!


#ifndef CAR_SPRAYING_MESSAGE_SETSERVODAMPING_H
#define CAR_SPRAYING_MESSAGE_SETSERVODAMPING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Car_Spraying
{
template <class ContainerAllocator>
struct SetServoDamping_
{
  typedef SetServoDamping_<ContainerAllocator> Type;

  SetServoDamping_()
    : id(0)
    , power(0)  {
    }
  SetServoDamping_(const ContainerAllocator& _alloc)
    : id(0)
    , power(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint16_t _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::Car_Spraying::SetServoDamping_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Car_Spraying::SetServoDamping_<ContainerAllocator> const> ConstPtr;

}; // struct SetServoDamping_

typedef ::Car_Spraying::SetServoDamping_<std::allocator<void> > SetServoDamping;

typedef boost::shared_ptr< ::Car_Spraying::SetServoDamping > SetServoDampingPtr;
typedef boost::shared_ptr< ::Car_Spraying::SetServoDamping const> SetServoDampingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Car_Spraying::SetServoDamping_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Car_Spraying::SetServoDamping_<ContainerAllocator1> & lhs, const ::Car_Spraying::SetServoDamping_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.power == rhs.power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Car_Spraying::SetServoDamping_<ContainerAllocator1> & lhs, const ::Car_Spraying::SetServoDamping_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Car_Spraying

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Car_Spraying::SetServoDamping_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Car_Spraying::SetServoDamping_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Car_Spraying::SetServoDamping_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5f9d7f2f2291fcc1ddba2b1e73469a0";
  }

  static const char* value(const ::Car_Spraying::SetServoDamping_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5f9d7f2f2291fccULL;
  static const uint64_t static_value2 = 0x1ddba2b1e73469a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Car_Spraying/SetServoDamping";
  }

  static const char* value(const ::Car_Spraying::SetServoDamping_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n"
"uint16 power\n"
;
  }

  static const char* value(const ::Car_Spraying::SetServoDamping_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetServoDamping_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Car_Spraying::SetServoDamping_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Car_Spraying::SetServoDamping_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "power: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_SPRAYING_MESSAGE_SETSERVODAMPING_H
