// Generated by gencpp from file track_avoid/Depth.msg
// DO NOT EDIT!


#ifndef TRACK_AVOID_MESSAGE_DEPTH_H
#define TRACK_AVOID_MESSAGE_DEPTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace track_avoid
{
template <class ContainerAllocator>
struct Depth_
{
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
    : locate(0)
    , depth(0)  {
    }
  Depth_(const ContainerAllocator& _alloc)
    : locate(0)
    , depth(0)  {
  (void)_alloc;
    }



   typedef uint16_t _locate_type;
  _locate_type locate;

   typedef uint16_t _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::track_avoid::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::track_avoid::Depth_<ContainerAllocator> const> ConstPtr;

}; // struct Depth_

typedef ::track_avoid::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::track_avoid::Depth > DepthPtr;
typedef boost::shared_ptr< ::track_avoid::Depth const> DepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::track_avoid::Depth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::track_avoid::Depth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::track_avoid::Depth_<ContainerAllocator1> & lhs, const ::track_avoid::Depth_<ContainerAllocator2> & rhs)
{
  return lhs.locate == rhs.locate &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::track_avoid::Depth_<ContainerAllocator1> & lhs, const ::track_avoid::Depth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace track_avoid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::track_avoid::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::track_avoid::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::track_avoid::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::track_avoid::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::track_avoid::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::track_avoid::Depth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::track_avoid::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0af3060455b6b7cf46be4171b872aa5";
  }

  static const char* value(const ::track_avoid::Depth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0af3060455b6b7cULL;
  static const uint64_t static_value2 = 0xf46be4171b872aa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::track_avoid::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "track_avoid/Depth";
  }

  static const char* value(const ::track_avoid::Depth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::track_avoid::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 locate\n"
"uint16 depth\n"
;
  }

  static const char* value(const ::track_avoid::Depth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::track_avoid::Depth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.locate);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Depth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::track_avoid::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::track_avoid::Depth_<ContainerAllocator>& v)
  {
    s << indent << "locate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.locate);
    s << indent << "depth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACK_AVOID_MESSAGE_DEPTH_H
